// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Siasm
{
    public sealed class BattleFighterMasterDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Siasm.BattleFighterMasterData>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ProductName
        private static global::System.ReadOnlySpan<byte> GetSpan_ProductName() => new byte[1 + 11] { 171, 80, 114, 111, 100, 117, 99, 116, 78, 97, 109, 101 };
        // ThemeNameMemo
        private static global::System.ReadOnlySpan<byte> GetSpan_ThemeNameMemo() => new byte[1 + 13] { 173, 84, 104, 101, 109, 101, 78, 97, 109, 101, 77, 101, 109, 111 };
        // TrueName
        private static global::System.ReadOnlySpan<byte> GetSpan_TrueName() => new byte[1 + 8] { 168, 84, 114, 117, 101, 78, 97, 109, 101 };
        // AdmissionName
        private static global::System.ReadOnlySpan<byte> GetSpan_AdmissionName() => new byte[1 + 13] { 173, 65, 100, 109, 105, 115, 115, 105, 111, 110, 78, 97, 109, 101 };
        // ManagementNumber
        private static global::System.ReadOnlySpan<byte> GetSpan_ManagementNumber() => new byte[1 + 16] { 176, 77, 97, 110, 97, 103, 101, 109, 101, 110, 116, 78, 117, 109, 98, 101, 114 };
        // RiskLevelType
        private static global::System.ReadOnlySpan<byte> GetSpan_RiskLevelType() => new byte[1 + 13] { 173, 82, 105, 115, 107, 76, 101, 118, 101, 108, 84, 121, 112, 101 };
        // DevelopmentMemo
        private static global::System.ReadOnlySpan<byte> GetSpan_DevelopmentMemo() => new byte[1 + 15] { 175, 68, 101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 77, 101, 109, 111 };
        // AttributeResistMasterData
        private static global::System.ReadOnlySpan<byte> GetSpan_AttributeResistMasterData() => new byte[1 + 25] { 185, 65, 116, 116, 114, 105, 98, 117, 116, 101, 82, 101, 115, 105, 115, 116, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97 };
        // PassiveAbilityMasterDataArray
        private static global::System.ReadOnlySpan<byte> GetSpan_PassiveAbilityMasterDataArray() => new byte[1 + 29] { 189, 80, 97, 115, 115, 105, 118, 101, 65, 98, 105, 108, 105, 116, 121, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97, 65, 114, 114, 97, 121 };
        // DeckMasterDataArray
        private static global::System.ReadOnlySpan<byte> GetSpan_DeckMasterDataArray() => new byte[1 + 19] { 179, 68, 101, 99, 107, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97, 65, 114, 114, 97, 121 };
        // DropItemMasterDataArray
        private static global::System.ReadOnlySpan<byte> GetSpan_DropItemMasterDataArray() => new byte[1 + 23] { 183, 68, 114, 111, 112, 73, 116, 101, 109, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97, 65, 114, 114, 97, 121 };
        // ArchiveMasterData
        private static global::System.ReadOnlySpan<byte> GetSpan_ArchiveMasterData() => new byte[1 + 17] { 177, 65, 114, 99, 104, 105, 118, 101, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97 };
        // TechnologyDeveloperMasterData
        private static global::System.ReadOnlySpan<byte> GetSpan_TechnologyDeveloperMasterData() => new byte[1 + 29] { 189, 84, 101, 99, 104, 110, 111, 108, 111, 103, 121, 68, 101, 118, 101, 108, 111, 112, 101, 114, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Siasm.BattleFighterMasterData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_ProductName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ProductName, options);
            writer.WriteRaw(GetSpan_ThemeNameMemo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ThemeNameMemo, options);
            writer.WriteRaw(GetSpan_TrueName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TrueName, options);
            writer.WriteRaw(GetSpan_AdmissionName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AdmissionName, options);
            writer.WriteRaw(GetSpan_ManagementNumber());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ManagementNumber, options);
            writer.WriteRaw(GetSpan_RiskLevelType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.RiskLevelType>(formatterResolver).Serialize(ref writer, value.RiskLevelType, options);
            writer.WriteRaw(GetSpan_DevelopmentMemo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DevelopmentMemo, options);
            writer.WriteRaw(GetSpan_AttributeResistMasterData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistMasterData>(formatterResolver).Serialize(ref writer, value.AttributeResistMasterData, options);
            writer.WriteRaw(GetSpan_PassiveAbilityMasterDataArray());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.PassiveAbilityMasterData[]>(formatterResolver).Serialize(ref writer, value.PassiveAbilityMasterDataArray, options);
            writer.WriteRaw(GetSpan_DeckMasterDataArray());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.DeckMasterData[]>(formatterResolver).Serialize(ref writer, value.DeckMasterDataArray, options);
            writer.WriteRaw(GetSpan_DropItemMasterDataArray());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.DropItemMasterData[]>(formatterResolver).Serialize(ref writer, value.DropItemMasterDataArray, options);
            writer.WriteRaw(GetSpan_ArchiveMasterData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.ArchiveMasterData>(formatterResolver).Serialize(ref writer, value.ArchiveMasterData, options);
            writer.WriteRaw(GetSpan_TechnologyDeveloperMasterData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.TechnologyDeveloperMasterData>(formatterResolver).Serialize(ref writer, value.TechnologyDeveloperMasterData, options);
        }

        public global::Siasm.BattleFighterMasterData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __ProductName__ = default(string);
            var __ThemeNameMemo__ = default(string);
            var __TrueName__ = default(string);
            var __AdmissionName__ = default(string);
            var __ManagementNumber__ = default(string);
            var __RiskLevelType__ = default(global::Siasm.RiskLevelType);
            var __DevelopmentMemo__ = default(string);
            var __AttributeResistMasterData__ = default(global::Siasm.AttributeResistMasterData);
            var __PassiveAbilityMasterDataArray__ = default(global::Siasm.PassiveAbilityMasterData[]);
            var __DeckMasterDataArray__ = default(global::Siasm.DeckMasterData[]);
            var __DropItemMasterDataArray__ = default(global::Siasm.DropItemMasterData[]);
            var __ArchiveMasterData__ = default(global::Siasm.ArchiveMasterData);
            var __TechnologyDeveloperMasterData__ = default(global::Siasm.TechnologyDeveloperMasterData);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProductName().Slice(1))) { goto FAIL; }

                        __ProductName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7881667020409104468UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 478576725349UL) { goto FAIL; }

                                __ThemeNameMemo__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8028074750291829825UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435626790510UL) { goto FAIL; }

                                __AdmissionName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7311142423977224530UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435678696556UL) { goto FAIL; }

                                __RiskLevelType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.RiskLevelType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604759629722196UL) { goto FAIL; }

                        __TrueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ManagementNumber().Slice(1))) { goto FAIL; }

                        __ManagementNumber__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DevelopmentMemo().Slice(1))) { goto FAIL; }

                        __DevelopmentMemo__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 25:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AttributeResistMasterData().Slice(1))) { goto FAIL; }

                        __AttributeResistMasterData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistMasterData>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 29:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712302780393677136UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PassiveAbilityMasterDataArray().Slice(1 + 8))) { goto FAIL; }

                                __PassiveAbilityMasterDataArray__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.PassiveAbilityMasterData[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8028914755683181908UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TechnologyDeveloperMasterData().Slice(1 + 8))) { goto FAIL; }

                                __TechnologyDeveloperMasterData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.TechnologyDeveloperMasterData>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DeckMasterDataArray().Slice(1))) { goto FAIL; }

                        __DeckMasterDataArray__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.DeckMasterData[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 23:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DropItemMasterDataArray().Slice(1))) { goto FAIL; }

                        __DropItemMasterDataArray__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.DropItemMasterData[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ArchiveMasterData().Slice(1))) { goto FAIL; }

                        __ArchiveMasterData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.ArchiveMasterData>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Siasm.BattleFighterMasterData(__Id__, __ProductName__, __ThemeNameMemo__, __TrueName__, __AdmissionName__, __ManagementNumber__, __RiskLevelType__, __DevelopmentMemo__, __AttributeResistMasterData__, __PassiveAbilityMasterDataArray__, __DeckMasterDataArray__, __DropItemMasterDataArray__, __ArchiveMasterData__, __TechnologyDeveloperMasterData__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
