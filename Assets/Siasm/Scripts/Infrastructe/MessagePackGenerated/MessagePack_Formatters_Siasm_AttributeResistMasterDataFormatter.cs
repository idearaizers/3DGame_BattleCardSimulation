// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Siasm
{
    public sealed class AttributeResistMasterDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Siasm.AttributeResistMasterData>
    {
        // NormalResist
        private static global::System.ReadOnlySpan<byte> GetSpan_NormalResist() => new byte[1 + 12] { 172, 78, 111, 114, 109, 97, 108, 82, 101, 115, 105, 115, 116 };
        // JoyResist
        private static global::System.ReadOnlySpan<byte> GetSpan_JoyResist() => new byte[1 + 9] { 169, 74, 111, 121, 82, 101, 115, 105, 115, 116 };
        // TrustResist
        private static global::System.ReadOnlySpan<byte> GetSpan_TrustResist() => new byte[1 + 11] { 171, 84, 114, 117, 115, 116, 82, 101, 115, 105, 115, 116 };
        // FearResist
        private static global::System.ReadOnlySpan<byte> GetSpan_FearResist() => new byte[1 + 10] { 170, 70, 101, 97, 114, 82, 101, 115, 105, 115, 116 };
        // SurpriseResist
        private static global::System.ReadOnlySpan<byte> GetSpan_SurpriseResist() => new byte[1 + 14] { 174, 83, 117, 114, 112, 114, 105, 115, 101, 82, 101, 115, 105, 115, 116 };
        // SadnessResist
        private static global::System.ReadOnlySpan<byte> GetSpan_SadnessResist() => new byte[1 + 13] { 173, 83, 97, 100, 110, 101, 115, 115, 82, 101, 115, 105, 115, 116 };
        // DisgustResist
        private static global::System.ReadOnlySpan<byte> GetSpan_DisgustResist() => new byte[1 + 13] { 173, 68, 105, 115, 103, 117, 115, 116, 82, 101, 115, 105, 115, 116 };
        // AngerResist
        private static global::System.ReadOnlySpan<byte> GetSpan_AngerResist() => new byte[1 + 11] { 171, 65, 110, 103, 101, 114, 82, 101, 115, 105, 115, 116 };
        // AnticipationResist
        private static global::System.ReadOnlySpan<byte> GetSpan_AnticipationResist() => new byte[1 + 18] { 178, 65, 110, 116, 105, 99, 105, 112, 97, 116, 105, 111, 110, 82, 101, 115, 105, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Siasm.AttributeResistMasterData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_NormalResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.NormalResist, options);
            writer.WriteRaw(GetSpan_JoyResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.JoyResist, options);
            writer.WriteRaw(GetSpan_TrustResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.TrustResist, options);
            writer.WriteRaw(GetSpan_FearResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.FearResist, options);
            writer.WriteRaw(GetSpan_SurpriseResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.SurpriseResist, options);
            writer.WriteRaw(GetSpan_SadnessResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.SadnessResist, options);
            writer.WriteRaw(GetSpan_DisgustResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.DisgustResist, options);
            writer.WriteRaw(GetSpan_AngerResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.AngerResist, options);
            writer.WriteRaw(GetSpan_AnticipationResist());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Serialize(ref writer, value.AnticipationResist, options);
        }

        public global::Siasm.AttributeResistMasterData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Siasm.AttributeResistMasterData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_NormalResist().Slice(1))) { goto FAIL; }

                        ____result.NormalResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_JoyResist().Slice(1))) { goto FAIL; }

                        ____result.JoyResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8315142947116249684UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7631721UL) { goto FAIL; }

                                ____result.TrustResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8315142938290515521UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7631721UL) { goto FAIL; }

                                ____result.AngerResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FearResist().Slice(1))) { goto FAIL; }

                        ____result.FearResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SurpriseResist().Slice(1))) { goto FAIL; }

                        ____result.SurpriseResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5941219212912779603UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 500152496997UL) { goto FAIL; }

                                ____result.SadnessResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5941500756492511556UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 500152496997UL) { goto FAIL; }

                                ____result.DisgustResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 18:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AnticipationResist().Slice(1))) { goto FAIL; }

                        ____result.AnticipationResist = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.AttributeResistType>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
