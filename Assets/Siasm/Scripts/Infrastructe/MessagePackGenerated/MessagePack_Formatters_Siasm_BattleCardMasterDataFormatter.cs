// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Siasm
{
    public sealed class BattleCardMasterDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Siasm.BattleCardMasterData>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // CardName
        private static global::System.ReadOnlySpan<byte> GetSpan_CardName() => new byte[1 + 8] { 168, 67, 97, 114, 100, 78, 97, 109, 101 };
        // CardReelType
        private static global::System.ReadOnlySpan<byte> GetSpan_CardReelType() => new byte[1 + 12] { 172, 67, 97, 114, 100, 82, 101, 101, 108, 84, 121, 112, 101 };
        // MinReelNumber
        private static global::System.ReadOnlySpan<byte> GetSpan_MinReelNumber() => new byte[1 + 13] { 173, 77, 105, 110, 82, 101, 101, 108, 78, 117, 109, 98, 101, 114 };
        // MaxReelNumber
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxReelNumber() => new byte[1 + 13] { 173, 77, 97, 120, 82, 101, 101, 108, 78, 117, 109, 98, 101, 114 };
        // FlavorText
        private static global::System.ReadOnlySpan<byte> GetSpan_FlavorText() => new byte[1 + 10] { 170, 70, 108, 97, 118, 111, 114, 84, 101, 120, 116 };
        // EmotionAttributeType
        private static global::System.ReadOnlySpan<byte> GetSpan_EmotionAttributeType() => new byte[1 + 20] { 180, 69, 109, 111, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 84, 121, 112, 101 };
        // BattleCardAbilityMasterDataArray
        private static global::System.ReadOnlySpan<byte> GetSpan_BattleCardAbilityMasterDataArray() => new byte[2 + 32] { 217, 32, 66, 97, 116, 116, 108, 101, 67, 97, 114, 100, 65, 98, 105, 108, 105, 116, 121, 77, 97, 115, 116, 101, 114, 68, 97, 116, 97, 65, 114, 114, 97, 121 };
        // DevelopmentMemo
        private static global::System.ReadOnlySpan<byte> GetSpan_DevelopmentMemo() => new byte[1 + 15] { 175, 68, 101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 77, 101, 109, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Siasm.BattleCardMasterData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_CardName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.CardName, options);
            writer.WriteRaw(GetSpan_CardReelType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.CardReelType>(formatterResolver).Serialize(ref writer, value.CardReelType, options);
            writer.WriteRaw(GetSpan_MinReelNumber());
            writer.Write(value.MinReelNumber);
            writer.WriteRaw(GetSpan_MaxReelNumber());
            writer.Write(value.MaxReelNumber);
            writer.WriteRaw(GetSpan_FlavorText());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FlavorText, options);
            writer.WriteRaw(GetSpan_EmotionAttributeType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.EmotionAttributeType>(formatterResolver).Serialize(ref writer, value.EmotionAttributeType, options);
            writer.WriteRaw(GetSpan_BattleCardAbilityMasterDataArray());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.BattleCardAbilityMasterData[]>(formatterResolver).Serialize(ref writer, value.BattleCardAbilityMasterDataArray, options);
            writer.WriteRaw(GetSpan_DevelopmentMemo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DevelopmentMemo, options);
        }

        public global::Siasm.BattleCardMasterData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __CardName__ = default(string);
            var __CardReelType__ = default(global::Siasm.CardReelType);
            var __MinReelNumber__ = default(int);
            var __MaxReelNumber__ = default(int);
            var __FlavorText__ = default(string);
            var __EmotionAttributeType__ = default(global::Siasm.EmotionAttributeType);
            var __BattleCardAbilityMasterDataArray__ = default(global::Siasm.BattleCardAbilityMasterData[]);
            var __DevelopmentMemo__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604759612744003UL) { goto FAIL; }

                        __CardName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CardReelType().Slice(1))) { goto FAIL; }

                        __CardReelType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.CardReelType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5651003118292199757UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 491327221109UL) { goto FAIL; }

                                __MinReelNumber__ = reader.ReadInt32();
                                continue;

                            case 5651003118292853069UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 491327221109UL) { goto FAIL; }

                                __MaxReelNumber__ = reader.ReadInt32();
                                continue;

                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FlavorText().Slice(1))) { goto FAIL; }

                        __FlavorText__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 20:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EmotionAttributeType().Slice(1))) { goto FAIL; }

                        __EmotionAttributeType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.EmotionAttributeType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 32:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattleCardAbilityMasterDataArray().Slice(2))) { goto FAIL; }

                        __BattleCardAbilityMasterDataArray__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.BattleCardAbilityMasterData[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DevelopmentMemo().Slice(1))) { goto FAIL; }

                        __DevelopmentMemo__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Siasm.BattleCardMasterData(__Id__, __CardName__, __CardReelType__, __MinReelNumber__, __MaxReelNumber__, __FlavorText__, __EmotionAttributeType__, __BattleCardAbilityMasterDataArray__, __DevelopmentMemo__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
