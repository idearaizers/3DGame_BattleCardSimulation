// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Siasm
{
    public sealed class PassiveAbilityMasterDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Siasm.PassiveAbilityMasterData>
    {
        // ReleaseLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_ReleaseLevel() => new byte[1 + 12] { 172, 82, 101, 108, 101, 97, 115, 101, 76, 101, 118, 101, 108 };
        // PassiveAbilityName
        private static global::System.ReadOnlySpan<byte> GetSpan_PassiveAbilityName() => new byte[1 + 18] { 178, 80, 97, 115, 115, 105, 118, 101, 65, 98, 105, 108, 105, 116, 121, 78, 97, 109, 101 };
        // PassiveAbilityType
        private static global::System.ReadOnlySpan<byte> GetSpan_PassiveAbilityType() => new byte[1 + 18] { 178, 80, 97, 115, 115, 105, 118, 101, 65, 98, 105, 108, 105, 116, 121, 84, 121, 112, 101 };
        // MainDetailNumber
        private static global::System.ReadOnlySpan<byte> GetSpan_MainDetailNumber() => new byte[1 + 16] { 176, 77, 97, 105, 110, 68, 101, 116, 97, 105, 108, 78, 117, 109, 98, 101, 114 };
        // SubDetailNumber
        private static global::System.ReadOnlySpan<byte> GetSpan_SubDetailNumber() => new byte[1 + 15] { 175, 83, 117, 98, 68, 101, 116, 97, 105, 108, 78, 117, 109, 98, 101, 114 };
        // DevelopmentMemo
        private static global::System.ReadOnlySpan<byte> GetSpan_DevelopmentMemo() => new byte[1 + 15] { 175, 68, 101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 77, 101, 109, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Siasm.PassiveAbilityMasterData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_ReleaseLevel());
            writer.Write(value.ReleaseLevel);
            writer.WriteRaw(GetSpan_PassiveAbilityName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PassiveAbilityName, options);
            writer.WriteRaw(GetSpan_PassiveAbilityType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.PassiveAbilityType>(formatterResolver).Serialize(ref writer, value.PassiveAbilityType, options);
            writer.WriteRaw(GetSpan_MainDetailNumber());
            writer.Write(value.MainDetailNumber);
            writer.WriteRaw(GetSpan_SubDetailNumber());
            writer.Write(value.SubDetailNumber);
            writer.WriteRaw(GetSpan_DevelopmentMemo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DevelopmentMemo, options);
        }

        public global::Siasm.PassiveAbilityMasterData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Siasm.PassiveAbilityMasterData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ReleaseLevel().Slice(1))) { goto FAIL; }

                        ____result.ReleaseLevel = reader.ReadInt32();
                        continue;
                    case 18:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712302780393677136UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 7011675210754320738UL:
                                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25965UL) { goto FAIL; }

                                        ____result.PassiveAbilityName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                        continue;

                                    case 8742746317524855138UL:
                                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25968UL) { goto FAIL; }

                                        ____result.PassiveAbilityType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Siasm.PassiveAbilityType>(formatterResolver).Deserialize(ref reader, options);
                                        continue;

                                }

                        }
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MainDetailNumber().Slice(1))) { goto FAIL; }

                        ____result.MainDetailNumber = reader.ReadInt32();
                        continue;
                    case 15:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7593478425011189075UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32199620762619500UL) { goto FAIL; }

                                ____result.SubDetailNumber = reader.ReadInt32();
                                continue;

                            case 7885925458875147588UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 31364004273483365UL) { goto FAIL; }

                                ____result.DevelopmentMemo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
